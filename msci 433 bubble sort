# Seed is the last 4 digits of student number, using 8419 as requested.
seed = 8419  
random.seed(seed)

# Generate 11 random numbers to be used as seeds
random_numbers_8419 = [random.randint(0, 100) for _ in range(11)]

# Function to generate a single instance with random orders, item types, and totes
def generate_instance(seed, num_orders_range=(5, 20), num_item_types_range=(3, 10), max_totes=15):
    random.seed(seed)  # Set the seed for reproducibility
    num_orders = random.randint(*num_orders_range)
    num_item_types = random.randint(*num_item_types_range)
    
    instance = []
    
    for order in range(1, num_orders + 1):
        order_size = random.randint(1, num_item_types)  # Size of the order in terms of item types
        item_types = random.sample(range(1, num_item_types + 1), order_size)  # Random distinct item types
        quantities = [random.randint(1, 5) for _ in item_types]  # Random quantities for each item type
        totes = random.sample(range(1, max_totes + 1), order_size)  # Random totes for each item type
        
        order_info = {
            'Order': order,
            'Item Types': item_types,
            'Quantities': quantities,
            'Totes': totes
        }
        instance.append(order_info)
    
    return instance

# Generate 10 instances using the random numbers generated by seed 8419
test_instances_8419 = [generate_instance(seed) for seed in random_numbers_8419[:10]]

# Function to sort orders by size using Bubble Sort
def bubble_sort_orders(orders):
    n = len(orders)
    for i in range(n):
        for j in range(0, n-i-1):
            if len(orders[j]['Item Types']) > len(orders[j+1]['Item Types']):
                orders[j], orders[j+1] = orders[j+1], orders[j]
    return orders
#######
# bubble sort
def sort_and_consolidate(instance):
    # sort by size
    sorted_orders = bubble_sort_orders(instance)

    
    consolidation_time = 0
    total_totes_used = 0
    
    # Loop through each order in sorted list
    for order in sorted_orders:
        totes_used = len(order['Totes'])  # Count the number of totes used for this order
        consolidation_time += totes_used * 2  # Assume each tote takes 2 time units to process
        total_totes_used += totes_used  # Add the tote count for each order


    return {
        "Total Totes Used": total_totes_used,
        "Consolidation Time": consolidation_time
    }

# Apply the sorting and consolidation process to one of the test instances generated with seed 8419
results_8419 = sort_and_consolidate(test_instances_8419[0])

# Display the results
print(results_8419)

# Assumption: Each tote takes 2 time units to process. This assumption can be adjusted depending on the actual time needed.
